// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2024 Cloudhippie <info@cloudhippie.de>
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataInitParameters struct {

	// (Number)
	Algorithm *float64 `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (Number)
	Altitude *float64 `json:"altitude,omitempty" tf:"altitude,omitempty"`

	// (String)
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// (String)
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String)
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// (Number)
	DigestType *float64 `json:"digestType,omitempty" tf:"digest_type,omitempty"`

	// (String)
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// (String)
	Flags *string `json:"flags,omitempty" tf:"flags,omitempty"`

	// (Number)
	KeyTag *float64 `json:"keyTag,omitempty" tf:"key_tag,omitempty"`

	// (Number)
	LatDegrees *float64 `json:"latDegrees,omitempty" tf:"lat_degrees,omitempty"`

	// (String)
	LatDirection *string `json:"latDirection,omitempty" tf:"lat_direction,omitempty"`

	// (Number)
	LatMinutes *float64 `json:"latMinutes,omitempty" tf:"lat_minutes,omitempty"`

	// (Number)
	LatSeconds *float64 `json:"latSeconds,omitempty" tf:"lat_seconds,omitempty"`

	// (Number)
	LongDegrees *float64 `json:"longDegrees,omitempty" tf:"long_degrees,omitempty"`

	// (String)
	LongDirection *string `json:"longDirection,omitempty" tf:"long_direction,omitempty"`

	// (Number)
	LongMinutes *float64 `json:"longMinutes,omitempty" tf:"long_minutes,omitempty"`

	// (Number)
	LongSeconds *float64 `json:"longSeconds,omitempty" tf:"long_seconds,omitempty"`

	// (Number)
	MatchingType *float64 `json:"matchingType,omitempty" tf:"matching_type,omitempty"`

	// (String) The name of the record. Modifying this attribute will force creation of a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number)
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// (Number)
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Number)
	PrecisionHorz *float64 `json:"precisionHorz,omitempty" tf:"precision_horz,omitempty"`

	// (Number)
	PrecisionVert *float64 `json:"precisionVert,omitempty" tf:"precision_vert,omitempty"`

	// (Number)
	Preference *float64 `json:"preference,omitempty" tf:"preference,omitempty"`

	// (Number) The priority of the record.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String)
	Proto *string `json:"proto,omitempty" tf:"proto,omitempty"`

	// (Number)
	Protocol *float64 `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// (String)
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// (String)
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`

	// (String)
	Replacement *string `json:"replacement,omitempty" tf:"replacement,omitempty"`

	// (Number)
	Selector *float64 `json:"selector,omitempty" tf:"selector,omitempty"`

	// (String)
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Number)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// (String)
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String)
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the record. Available values: A, AAAA, CAA, CNAME, TXT, SRV, LOC, MX, NS, SPF, CERT, DNSKEY, DS, NAPTR, SMIMEA, SSHFP, TLSA, URI, PTR, HTTPS, SVCB. Modifying this attribute will force creation of a new resource.
	Type *float64 `json:"type,omitempty" tf:"type,omitempty"`

	// (Number)
	Usage *float64 `json:"usage,omitempty" tf:"usage,omitempty"`

	// (String) The value of the record. Conflicts with data.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (Number)
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type DataObservation struct {

	// (Number)
	Algorithm *float64 `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (Number)
	Altitude *float64 `json:"altitude,omitempty" tf:"altitude,omitempty"`

	// (String)
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// (String)
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String)
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// (Number)
	DigestType *float64 `json:"digestType,omitempty" tf:"digest_type,omitempty"`

	// (String)
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// (String)
	Flags *string `json:"flags,omitempty" tf:"flags,omitempty"`

	// (Number)
	KeyTag *float64 `json:"keyTag,omitempty" tf:"key_tag,omitempty"`

	// (Number)
	LatDegrees *float64 `json:"latDegrees,omitempty" tf:"lat_degrees,omitempty"`

	// (String)
	LatDirection *string `json:"latDirection,omitempty" tf:"lat_direction,omitempty"`

	// (Number)
	LatMinutes *float64 `json:"latMinutes,omitempty" tf:"lat_minutes,omitempty"`

	// (Number)
	LatSeconds *float64 `json:"latSeconds,omitempty" tf:"lat_seconds,omitempty"`

	// (Number)
	LongDegrees *float64 `json:"longDegrees,omitempty" tf:"long_degrees,omitempty"`

	// (String)
	LongDirection *string `json:"longDirection,omitempty" tf:"long_direction,omitempty"`

	// (Number)
	LongMinutes *float64 `json:"longMinutes,omitempty" tf:"long_minutes,omitempty"`

	// (Number)
	LongSeconds *float64 `json:"longSeconds,omitempty" tf:"long_seconds,omitempty"`

	// (Number)
	MatchingType *float64 `json:"matchingType,omitempty" tf:"matching_type,omitempty"`

	// (String) The name of the record. Modifying this attribute will force creation of a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number)
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// (Number)
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Number)
	PrecisionHorz *float64 `json:"precisionHorz,omitempty" tf:"precision_horz,omitempty"`

	// (Number)
	PrecisionVert *float64 `json:"precisionVert,omitempty" tf:"precision_vert,omitempty"`

	// (Number)
	Preference *float64 `json:"preference,omitempty" tf:"preference,omitempty"`

	// (Number) The priority of the record.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String)
	Proto *string `json:"proto,omitempty" tf:"proto,omitempty"`

	// (Number)
	Protocol *float64 `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// (String)
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// (String)
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`

	// (String)
	Replacement *string `json:"replacement,omitempty" tf:"replacement,omitempty"`

	// (Number)
	Selector *float64 `json:"selector,omitempty" tf:"selector,omitempty"`

	// (String)
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Number)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// (String)
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String)
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the record. Available values: A, AAAA, CAA, CNAME, TXT, SRV, LOC, MX, NS, SPF, CERT, DNSKEY, DS, NAPTR, SMIMEA, SSHFP, TLSA, URI, PTR, HTTPS, SVCB. Modifying this attribute will force creation of a new resource.
	Type *float64 `json:"type,omitempty" tf:"type,omitempty"`

	// (Number)
	Usage *float64 `json:"usage,omitempty" tf:"usage,omitempty"`

	// (String) The value of the record. Conflicts with data.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (Number)
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type DataParameters struct {

	// (Number)
	// +kubebuilder:validation:Optional
	Algorithm *float64 `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Altitude *float64 `json:"altitude,omitempty" tf:"altitude,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	DigestType *float64 `json:"digestType,omitempty" tf:"digest_type,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Flags *string `json:"flags,omitempty" tf:"flags,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	KeyTag *float64 `json:"keyTag,omitempty" tf:"key_tag,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	LatDegrees *float64 `json:"latDegrees,omitempty" tf:"lat_degrees,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	LatDirection *string `json:"latDirection,omitempty" tf:"lat_direction,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	LatMinutes *float64 `json:"latMinutes,omitempty" tf:"lat_minutes,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	LatSeconds *float64 `json:"latSeconds,omitempty" tf:"lat_seconds,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	LongDegrees *float64 `json:"longDegrees,omitempty" tf:"long_degrees,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	LongDirection *string `json:"longDirection,omitempty" tf:"long_direction,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	LongMinutes *float64 `json:"longMinutes,omitempty" tf:"long_minutes,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	LongSeconds *float64 `json:"longSeconds,omitempty" tf:"long_seconds,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	MatchingType *float64 `json:"matchingType,omitempty" tf:"matching_type,omitempty"`

	// (String) The name of the record. Modifying this attribute will force creation of a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	PrecisionHorz *float64 `json:"precisionHorz,omitempty" tf:"precision_horz,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	PrecisionVert *float64 `json:"precisionVert,omitempty" tf:"precision_vert,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Preference *float64 `json:"preference,omitempty" tf:"preference,omitempty"`

	// (Number) The priority of the record.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Proto *string `json:"proto,omitempty" tf:"proto,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Protocol *float64 `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Replacement *string `json:"replacement,omitempty" tf:"replacement,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Selector *float64 `json:"selector,omitempty" tf:"selector,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the record. Available values: A, AAAA, CAA, CNAME, TXT, SRV, LOC, MX, NS, SPF, CERT, DNSKEY, DS, NAPTR, SMIMEA, SSHFP, TLSA, URI, PTR, HTTPS, SVCB. Modifying this attribute will force creation of a new resource.
	// +kubebuilder:validation:Optional
	Type *float64 `json:"type,omitempty" tf:"type,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Usage *float64 `json:"usage,omitempty" tf:"usage,omitempty"`

	// (String) The value of the record. Conflicts with data.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RecordInitParameters struct {

	// This configuration is not recommended for most environments. Defaults to false. **This configuration is not recommended for most environments**. Defaults to `false`.
	AllowOverwrite *bool `json:"allowOverwrite,omitempty" tf:"allow_overwrite,omitempty"`

	// (String) Comments or notes about the DNS record. This field has no effect on DNS responses.
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Block List, Max: 1) Map of attributes that constitute the record value. Conflicts with value. (see below for nested schema)
	// Map of attributes that constitute the record value. Conflicts with `value`.
	Data []DataInitParameters `json:"data,omitempty" tf:"data,omitempty"`

	// (String) The name of the record. Modifying this attribute will force creation of a new resource.
	// The name of the record. **Modifying this attribute will force creation of a new resource.**
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The priority of the record.
	// The priority of the record.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (Boolean) Whether the record gets Cloudflare's origin protection.
	// Whether the record gets Cloudflare's origin protection.
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (Number) The TTL of the record.
	// The TTL of the record.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (Set of String) Custom tags for the DNS record.
	// Custom tags for the DNS record.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) The type of the record. Available values: A, AAAA, CAA, CNAME, TXT, SRV, LOC, MX, NS, SPF, CERT, DNSKEY, DS, NAPTR, SMIMEA, SSHFP, TLSA, URI, PTR, HTTPS, SVCB. Modifying this attribute will force creation of a new resource.
	// The type of the record. Available values: `A`, `AAAA`, `CAA`, `CNAME`, `TXT`, `SRV`, `LOC`, `MX`, `NS`, `SPF`, `CERT`, `DNSKEY`, `DS`, `NAPTR`, `SMIMEA`, `SSHFP`, `TLSA`, `URI`, `PTR`, `HTTPS`, `SVCB`. **Modifying this attribute will force creation of a new resource.**
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the record. Conflicts with data.
	// The value of the record. Conflicts with `data`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RecordObservation struct {

	// This configuration is not recommended for most environments. Defaults to false. **This configuration is not recommended for most environments**. Defaults to `false`.
	AllowOverwrite *bool `json:"allowOverwrite,omitempty" tf:"allow_overwrite,omitempty"`

	// (String) Comments or notes about the DNS record. This field has no effect on DNS responses.
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The RFC3339 timestamp of when the record was created.
	// The RFC3339 timestamp of when the record was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Block List, Max: 1) Map of attributes that constitute the record value. Conflicts with value. (see below for nested schema)
	// Map of attributes that constitute the record value. Conflicts with `value`.
	Data []DataObservation `json:"data,omitempty" tf:"data,omitempty"`

	// (String) The FQDN of the record.
	// The FQDN of the record.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value map of string metadata Cloudflare associates with the record.
	// A key-value map of string metadata Cloudflare associates with the record.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The RFC3339 timestamp of when the record was last modified.
	// The RFC3339 timestamp of when the record was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (String) The name of the record. Modifying this attribute will force creation of a new resource.
	// The name of the record. **Modifying this attribute will force creation of a new resource.**
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The priority of the record.
	// The priority of the record.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (Boolean) Shows whether this record can be proxied.
	// Shows whether this record can be proxied.
	Proxiable *bool `json:"proxiable,omitempty" tf:"proxiable,omitempty"`

	// (Boolean) Whether the record gets Cloudflare's origin protection.
	// Whether the record gets Cloudflare's origin protection.
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (Number) The TTL of the record.
	// The TTL of the record.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (Set of String) Custom tags for the DNS record.
	// Custom tags for the DNS record.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) The type of the record. Available values: A, AAAA, CAA, CNAME, TXT, SRV, LOC, MX, NS, SPF, CERT, DNSKEY, DS, NAPTR, SMIMEA, SSHFP, TLSA, URI, PTR, HTTPS, SVCB. Modifying this attribute will force creation of a new resource.
	// The type of the record. Available values: `A`, `AAAA`, `CAA`, `CNAME`, `TXT`, `SRV`, `LOC`, `MX`, `NS`, `SPF`, `CERT`, `DNSKEY`, `DS`, `NAPTR`, `SMIMEA`, `SSHFP`, `TLSA`, `URI`, `PTR`, `HTTPS`, `SVCB`. **Modifying this attribute will force creation of a new resource.**
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the record. Conflicts with data.
	// The value of the record. Conflicts with `data`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RecordParameters struct {

	// This configuration is not recommended for most environments. Defaults to false. **This configuration is not recommended for most environments**. Defaults to `false`.
	// +kubebuilder:validation:Optional
	AllowOverwrite *bool `json:"allowOverwrite,omitempty" tf:"allow_overwrite,omitempty"`

	// (String) Comments or notes about the DNS record. This field has no effect on DNS responses.
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Block List, Max: 1) Map of attributes that constitute the record value. Conflicts with value. (see below for nested schema)
	// Map of attributes that constitute the record value. Conflicts with `value`.
	// +kubebuilder:validation:Optional
	Data []DataParameters `json:"data,omitempty" tf:"data,omitempty"`

	// (String) The name of the record. Modifying this attribute will force creation of a new resource.
	// The name of the record. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The priority of the record.
	// The priority of the record.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (Boolean) Whether the record gets Cloudflare's origin protection.
	// Whether the record gets Cloudflare's origin protection.
	// +kubebuilder:validation:Optional
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (Number) The TTL of the record.
	// The TTL of the record.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (Set of String) Custom tags for the DNS record.
	// Custom tags for the DNS record.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) The type of the record. Available values: A, AAAA, CAA, CNAME, TXT, SRV, LOC, MX, NS, SPF, CERT, DNSKEY, DS, NAPTR, SMIMEA, SSHFP, TLSA, URI, PTR, HTTPS, SVCB. Modifying this attribute will force creation of a new resource.
	// The type of the record. Available values: `A`, `AAAA`, `CAA`, `CNAME`, `TXT`, `SRV`, `LOC`, `MX`, `NS`, `SPF`, `CERT`, `DNSKEY`, `DS`, `NAPTR`, `SMIMEA`, `SSHFP`, `TLSA`, `URI`, `PTR`, `HTTPS`, `SVCB`. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the record. Conflicts with data.
	// The value of the record. Conflicts with `data`.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// RecordSpec defines the desired state of Record
type RecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecordParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RecordInitParameters `json:"initProvider,omitempty"`
}

// RecordStatus defines the observed state of Record.
type RecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Record is the Schema for the Records API. Provides a Cloudflare record resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Record struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   RecordSpec   `json:"spec"`
	Status RecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecordList contains a list of Records
type RecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Record `json:"items"`
}

// Repository type metadata.
var (
	Record_Kind             = "Record"
	Record_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Record_Kind}.String()
	Record_KindAPIVersion   = Record_Kind + "." + CRDGroupVersion.String()
	Record_GroupVersionKind = CRDGroupVersion.WithKind(Record_Kind)
)

func init() {
	SchemeBuilder.Register(&Record{}, &RecordList{})
}
